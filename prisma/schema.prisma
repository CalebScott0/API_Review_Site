// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model business {
  id            String  @id @default(uuid())
  name          String
  average_stars Float   @default(0.0)
  review_count  Int     @default(0)
  address       String?
  city          String?
  postal_code   String?
  state         String?
  is_open       Boolean @default(false)
  latitude      Float?
  longitude     Float?

  categories          category_business[]
  reviews             review[]
  photos              photo_business[]
  tips                tip[]
  business_hours      business_hours[]
  business_attributes business_attributes[]
}

model user {
  id            String   @id @default(uuid())
  password      String
  first_name    String?
  last_name     String?
  email         String?  @unique
  average_stars Float    @default(0.0)
  review_count  Int      @default(0)
  user_since    DateTime @default(now())
  updated_at    DateTime @default(now())
  // useful, funny, and cool are the total of votes sent by the user to other reviews
  useful        Int      @default(0)
  funny         Int      @default(0)
  cool          Int      @default(0)
  // fans = # of fans a user has (different than friends, fans only follow your account?)
  fans          Int      @default(0)

  reviews          review[]
  tips             tip[]
  user_friend      user_friend[]     @relation("User_Friend_Relation")
  friends          user_friend[]
  user_compliments user_compliment[]
}

model user_friend {
  user_id       String
  friend_id     String
  friends_since DateTime @default(now())

  // CREATED_AT FOR HOW LONG YOU'VE BEEN FRIENDS?
  // WOULD NEED TO SEED RANDOM FOR ALL FRIENDS

  user   user @relation(fields: [user_id], references: [id], onDelete: Cascade)
  friend user @relation("User_Friend_Relation", fields: [friend_id], references: [id], onDelete: Cascade)

  @@id([user_id, friend_id])
  @@index([user_id])
}

enum compliment_type_enum {
  HOT
  MORE
  PROFILE
  CUTE
  LIST
  NOTE
  PLAIN
  COOL
  FUNNY
  WRITER
  PHOTOS
}

model user_compliment {
  id      String               @id @default(uuid())
  user_id String
  type    compliment_type_enum
  count   Int                  @default(0)
  // created_at DateTime        @default(now())

  user user @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model review {
  id          String   @id @default(uuid())
  stars       Int
  review_text String
  useful      Int      @default(0)
  funny       Int      @default(0)
  cool        Int      @default(0)
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  author_id   String
  business_id String

  author   user     @relation(fields: [author_id], references: [id], onDelete: Cascade)
  business business @relation(fields: [business_id], references: [id], onDelete: Cascade)

  @@unique(name: "unique_author_review", [author_id, business_id])
  @@index([author_id, created_at])
  @@index([business_id, created_at])
}

model category {
  id   String @id @default(uuid())
  name String @unique

  categories_businesses category_business[]
}

model category_business {
  business_id String
  category_id String

  business business @relation(fields: [business_id], references: [id], onDelete: Cascade)
  category category @relation(fields: [category_id], references: [id])

  @@id([business_id, category_id])
  @@index([business_id])
}

enum photo_label_enum {
  DRINK
  FOOD
  INSIDE
  MENU
  OUTSIDE
}

model photo_business {
  id      String           @id @default(uuid())
  caption String?
  label   photo_label_enum

  business_id String
  business    business @relation(fields: [business_id], references: [id], onDelete: Cascade)

  @@index([business_id])
}

model tip {
  id         String   @id @default(uuid())
  tip_text   String
  created_at DateTime @default(now())

  author_id   String
  business_id String

  author   user     @relation(fields: [author_id], references: [id], onDelete: Cascade)
  business business @relation(fields: [business_id], references: [id], onDelete: Cascade)

  @@unique([author_id, business_id])
  @@index([author_id, created_at])
  @@index([business_id, created_at])
}

model business_hours {
  id          String   @id @default(uuid())
  business_id String
  day_of_week String
  open_time   DateTime @db.Time()
  close_time  DateTime @db.Time()

  business business @relation(fields: [business_id], references: [id], onDelete: Cascade)

  @@index([business_id])
}

enum alcohol_enum {
  FULL_BAR
  BEER_AND_WINE
  // NONE?
}

enum byob_corkage_enum {
  YES_CORKAGE
  YES_FREE
  // NONE?
}

model business_attributes {
  id                String             @id @default(uuid())
  businessId        String             @unique
  accepts_insurance Boolean? //or required but default to false?
  alcohol           alcohol_enum? // or required and include none in enum?
  // - might be better practice to not include none in enums!
  byob              Boolean?
  byob_corkage      byob_corkage_enum?

  business business   @relation(fields: [businessId], references: [id], onDelete: Cascade)
  ambience ambience[]
}

model ambience {
  id                    String              @id @default(uuid())
  business_attribute_id String
  business_attribute    business_attributes @relation(fields: [business_attribute_id], references: [id])
}

enum ambience_enum {
}

// WRITE ENUMS HERE

// model business_attributes {
//   business_id String @id

//   business business @relation(fields: [business_id], references: [id], onDelete: Cascade)

//   accepts_insurance             String?
//   alcohol                       String?
//   ambience                      String?
//   byob                          String?
//   byob_corkage                  String?
//   best_nights                   String?
//   bike_parking                  String?
//   business_accepts_bitcoin      String?
//   business_accepts_credit_cards String?
//   business_parking              String?
//   by_appointment_only           String?
//   caters                        String?
//   coat_check                    String?
//   corkage                       String?
//   dogs_allowed                  String?
//   drive_thru                    String?
//   good_for_dancing              String?
//   good_for_kids                 String?
//   good_for_meal                 String?
//   hair_speciality               String?
//   happy_hour                    String?
//   has_tv                        String?
//   music                         String?
//   noise_level                   String?
//   outdooor_seating              String?
//   restaurant_attire             String?
//   restaurant_delivery           String?
//   restaurant_good_for_groups    String?
//   restaurant_price_range        String?
//   restaurant_reservations       String?
//   restaurant_table_service      String?
//   restaurant_take_out           String?
//   smoking                       String?
//   wheelchair_accessible         String?
//   wifi                          String?
// }
