// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model business {
  id                  String               @id @default(uuid())
  name                String
  // average of all stars 1-5 from reviews rounded to nearest half number
  average_stars       Float                @default(0.0)
  review_count        Int                  @default(0)
  address             String?
  city                String?
  postal_code         String?
  state               String?
  is_open             Boolean              @default(false)
  latitude            Float?
  longitude           Float?
  categories          category_business[]
  reviews             review[]
  photos              photo_business[]
  tips                tip[]
  // business_attributes business_attributes[]
  business_hours      business_hours?
  business_attributes business_attributes?
}

model user {
  id            String    @id @default(uuid())
  username      String    @unique
  password      String
  first_name    String?
  last_name     String?
  email         String?   @unique
  // average stars from all reviews NOT ROUNDED
  average_stars Float     @default(0.0)
  review_count  Int       @default(0)
  comment_count Int       @default(0)
  user_since    DateTime  @default(now())
  // useful, funny, and cool are the total of votes sent by the user to other reviews
  useful        Int       @default(0)
  funny         Int       @default(0)
  cool          Int       @default(0)
  // fans = # of fans a user has (different than friends, fans only follow your account?)
  fans          Int       @default(0)
  friends       String[]
  reviews       review[]
  comments      comment[]
  tips          tip[]
}

// model user_friends {
//   user_id String   @unique
//   friends String[]
// }

model review {
  id            String    @id @default(uuid())
  stars         Int
  review_text   String
  useful        Int       @default(0)
  funny         Int       @default(0)
  cool          Int       @default(0)
  comment_count Int       @default(0)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now())
  comments      comment[]
  author_id     String
  author        user      @relation(fields: [author_id], references: [id], onDelete: Cascade)
  business_id   String
  business      business  @relation(fields: [business_id], references: [id], onDelete: Cascade)
}

model comment {
  id           String   @id @default(uuid())
  comment_text String   @db.VarChar(255)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  author_id    String
  author       user     @relation(fields: [author_id], references: [id], onDelete: Cascade)
  review_id    String
  review       review   @relation(fields: [review_id], references: [id], onDelete: Cascade)
}

model category {
  id                    String              @id @default(uuid())
  name                  String              @unique
  categories_businesses category_business[]
}

model category_business {
  category_name String
  business_id   String
  business      business @relation(fields: [business_id], references: [id], onDelete: Cascade)
  category_id   String
  category      category @relation(fields: [category_id], references: [id])

  @@unique([business_id, category_id])
}

model photo_business {
  id          String   @id @default(uuid())
  caption     String?
  label       String?
  business_id String
  business    business @relation(fields: [business_id], references: [id], onDelete: Cascade)
}

model tip {
  created_at  DateTime @default(now())
  tip_text    String
  author_id   String
  author      user     @relation(fields: [author_id], references: [id], onDelete: Cascade)
  business_id String
  business    business @relation(fields: [business_id], references: [id], onDelete: Cascade)

  @@unique([author_id, business_id])
}

model business_hours {
  business_id String   @unique
  monday      String?
  tuesday     String?
  wednesday   String?
  thursday    String?
  friday      String?
  saturday    String?
  sunday      String?
  business    business @relation(fields: [business_id], references: [id], onDelete: Cascade)
}

// split this later into attribute categories, do this the same way as categories! (Many to Many relationship!)
model business_attributes {
  business_id                   String   @unique
  business                      business @relation(fields: [business_id], references: [id], onDelete: Cascade)
  accepts_insurance             String?
  alcohol                       String?
  ambience                      String?
  byob                          String?
  byob_corkage                  String?
  best_nights                   String?
  bike_parking                  String?
  business_accepts_bitcoin      String?
  business_accepts_credit_cards String?
  business_parking              String?
  by_appointment_only           String?
  caters                        String?
  coat_check                    String?
  corkage                       String?
  dogs_allowed                  String?
  drive_thru                    String?
  good_for_dancing              String?
  good_for_kids                 String?
  good_for_meal                 String?
  hair_speciality               String?
  happy_hour                    String?
  has_tv                        String?
  music                         String?
  noise_level                   String?
  outdooor_seating              String?
  restaurant_attire             String?
  restaurant_delivery           String?
  restaurant_good_for_groups    String?
  restaurant_price_range        String?
  restaurant_reservations       String?
  restaurant_table_service      String?
  restaurant_take_out           String?
  smoking                       String?
  wheelchair_accessible         String?
  wifi                          String?
}
