generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model businesses {
  id            String  @id @default(uuid())
  name          String
  average_stars Float   @default(0.0)
  review_count  Int     @default(0)
  address       String?
  city          String?
  postal_code   String?
  state         String?
  is_open       Boolean @default(false)
  longitude     Float
  latitude      Float

  // location            Geometry              @db.Geometry("Point", 4326) // Comment this out when running migrations
  // LOCATION FIELD CREATED IN TERMINAL, location type geometry with lat / long, and indexed
  // see location_business.js file in prisma
  business_attributes business_attributes?
  business_hours      business_hours[]
  categories          category_businesses[]
  photos              business_photos[]
  reviews             reviews[]
  tips                tips[]

  // @@index("idx_business_location", GIST[location])
}

model users {
  id               String             @id @default(uuid())
  password         String
  first_name       String?
  last_name        String?
  email            String?            @unique
  average_stars    Float              @default(0.0)
  review_count     Int                @default(0)
  user_since       DateTime           @default(now())
  updated_at       DateTime           @default(now())
  useful           Int                @default(0)
  funny            Int                @default(0)
  cool             Int                @default(0)
  fans             Int                @default(0)
  reviews          reviews[]
  tips             tips[]
  user_compliments user_compliments[]
  users_friends    user_friends[]     @relation("Users_Friends_Relation")
  friends          user_friends[]
}

model user_friends {
  user_id       String
  friend_id     String
  friends_since DateTime @default(now())
  friend        users    @relation("Users_Friends_Relation", fields: [friend_id], references: [id], onDelete: Cascade)
  user          users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, friend_id])
  @@index([user_id])
}

model user_compliments {
  id      String          @id @default(uuid())
  user_id String
  type    compliment_type
  count   Int             @default(0)
  user    users           @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model reviews {
  id          String     @id @default(uuid())
  stars       Int
  review_text String
  useful      Int        @default(0)
  funny       Int        @default(0)
  cool        Int        @default(0)
  created_at  DateTime   @default(now())
  updated_at  DateTime   @default(now())
  author_id   String
  business_id String
  author      users      @relation(fields: [author_id], references: [id], onDelete: Cascade)
  business    businesses @relation(fields: [business_id], references: [id], onDelete: Cascade)

  @@unique([author_id, business_id], name: "unique_author_review")
  @@index([author_id, created_at])
  @@index([business_id, created_at])
}

model categories {
  id                    String                @id @default(uuid())
  name                  String                @unique
  categories_businesses category_businesses[]
}

model category_businesses {
  business_id String
  category_id String
  business    businesses @relation(fields: [business_id], references: [id], onDelete: Cascade)
  category    categories @relation(fields: [category_id], references: [id])

  @@id([business_id, category_id])
  @@index([business_id])
}

model business_photos {
  id          String           @id @default(uuid())
  caption     String?
  label       photo_label_type
  business_id String
  business    businesses       @relation(fields: [business_id], references: [id], onDelete: Cascade)

  @@index([business_id])
}

model tips {
  id          String     @id @default(uuid())
  tip_text    String
  created_at  DateTime   @default(now())
  author_id   String
  business_id String
  author      users      @relation(fields: [author_id], references: [id], onDelete: Cascade)
  business    businesses @relation(fields: [business_id], references: [id], onDelete: Cascade)

  @@unique([author_id, business_id])
  @@index([author_id, created_at])
  @@index([business_id, created_at])
}

model business_hours {
  id          String      @id @default(uuid())
  business_id String
  day_of_week day_of_week
  open_time   DateTime    @db.Time(6)
  close_time  DateTime    @db.Time(6)
  business    businesses  @relation(fields: [business_id], references: [id], onDelete: Cascade)

  @@unique([business_id, day_of_week])
  @@index([business_id])
}

model business_attributes {
  business_id                   String                       @unique
  accepts_insurance             Boolean?
  alcohol                       alcohol_type?
  bike_parking                  Boolean?
  business_accepts_bitcoin      Boolean?
  business_accepts_credit_cards Boolean?
  by_appointment_only           Boolean?
  byob                          Boolean?
  byob_corkage                  byob_corkage_type?
  caters                        Boolean?
  coat_check                    Boolean?
  corkage                       Boolean?
  dogs_allowed                  Boolean?
  drive_thru                    Boolean?
  good_for_dancing              Boolean?
  good_for_kids                 Boolean?
  happy_hour                    Boolean?
  has_tv                        Boolean?
  noise_level                   noise_level_type?
  outdoor_seating               Boolean?
  restaurant_attire             restaurant_attire_type?
  restaurant_delivery           Boolean?
  restaurant_good_for_groups    Boolean?
  restaurant_price_range        Int?
  restaurant_reservations       Boolean?
  restaurant_table_service      Boolean?
  restaurant_take_out           Boolean?
  smoking                       smoking_type?
  wheelchair_accessible         Boolean?
  wifi                          wifi_type?
  ambience                      attribute_ambience[]
  best_nights                   attribute_best_nights[]
  business_parking              attribute_business_parking[]
  good_for_meal                 attribute_good_for_meal[]
  hair_speciality               attribute_hair_speciality[]
  music                         attribute_music[]
  businesses                    businesses                   @relation(fields: [business_id], references: [id], onDelete: Cascade)

  @@index([business_id])
}

model attribute_ambience {
  id                    String              @id @default(uuid())
  business_attribute_id String
  type                  ambience_type
  value                 Boolean
  business_attribute    business_attributes @relation(fields: [business_attribute_id], references: [business_id], onDelete: Cascade)

  @@unique([business_attribute_id, type])
  @@index([business_attribute_id])
}

model attribute_best_nights {
  id                    String              @id @default(uuid())
  business_attribute_id String
  day_of_week           day_of_week
  value                 Boolean
  business_attribute    business_attributes @relation(fields: [business_attribute_id], references: [business_id], onDelete: Cascade)

  @@unique([business_attribute_id, day_of_week])
  @@index([business_attribute_id])
}

model attribute_business_parking {
  id                    String                @id @default(uuid())
  business_attribute_id String
  type                  business_parking_type
  value                 Boolean
  business_attribute    business_attributes   @relation(fields: [business_attribute_id], references: [business_id], onDelete: Cascade)

  @@unique([business_attribute_id, type])
  @@index([business_attribute_id])
}

model attribute_good_for_meal {
  id                    String              @id @default(uuid())
  business_attribute_id String
  type                  meal_type
  value                 Boolean
  business_attribute    business_attributes @relation(fields: [business_attribute_id], references: [business_id], onDelete: Cascade)

  @@unique([business_attribute_id, type])
  @@index([business_attribute_id])
}

model attribute_hair_speciality {
  id                    String               @id @default(uuid())
  business_attribute_id String
  type                  hair_speciality_type
  value                 Boolean
  business_attribute    business_attributes  @relation(fields: [business_attribute_id], references: [business_id], onDelete: Cascade)

  @@unique([business_attribute_id, type])
  @@index([business_attribute_id])
}

model attribute_music {
  id                    String              @id @default(uuid())
  business_attribute_id String
  type                  music_type
  value                 Boolean
  business_attribute    business_attributes @relation(fields: [business_attribute_id], references: [business_id], onDelete: Cascade)

  @@unique([business_attribute_id, type])
  @@index([business_attribute_id])
}

enum compliment_type {
  COOL
  CUTE
  FUNNY
  HOT
  LIST
  MORE
  NOTE
  PHOTOS
  PLAIN
  PROFILE
  WRITER
}

enum photo_label_type {
  DRINK
  FOOD
  INSIDE
  MENU
  OUTSIDE
}

enum day_of_week {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum alcohol_type {
  BEER_AND_WINE
  FULL_BAR
  NONE
}

enum byob_corkage_type {
  YES_CORKAGE
  YES_FREE
  NONE
}

enum noise_level_type {
  AVERAGE
  LOUD
  QUIET
  VERY_LOUD
  NONE
}

enum restaurant_attire_type {
  CASUAL
  DRESSY
  FORMAL
  NONE
}

enum smoking_type {
  OUTDOOR
  YES
  NONE
}

enum wifi_type {
  FREE
  PAID
  NONE
}

enum ambience_type {
  TOURISTY
  HIPSTER
  ROMANTIC
  DIVEY
  INTIMATE
  TRENDY
  UPSCALE
  CLASSY
  CASUAL
}

enum business_parking_type {
  GARAGE
  LOT
  STREET
  VALET
  VALIDATED
}

enum meal_type {
  BREAKFAST
  BRUNCH
  DESSERT
  DINNER
  LATENIGHT
  LUNCH
}

enum hair_speciality_type {
  AFRICAN_AMERICAN
  ASIAN
  COLORING
  CURLY
  EXTENSIONS
  KIDS
  PERMS
  STRAIGHT_PERMS
}

enum music_type {
  BACKGROUND_MUSIC
  DJ
  JUKEBOX
  KARAOKE
  LIVE
  NO_MUSIC
  VIDEO
}
